React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.
React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.

However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process.

It's worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root')). This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.

One important thing to know about nested JSX is that it must return a single element and () -> optional in declaring JSX element

Declaring JSX const:
const JSX = (
  <div>
    <h1>This is a block of JSX</h1>
    <p>Here's a subtitle</p>
  </div>
);

Add Comments in JSX:	{/* */}


So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.

ReactDOM offers a simple method to render React elements to the DOM which looks like this: 
	ReactDOM.render(componentToRender, targetNode), 
where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.

const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// Change code below this line
ReactDOM.render(JSX,document.getElementById("challenge-node"));

HTML VS JSX
One key difference in JSX is that you can no longer use the word class to define HTML classes. This is because class is a reserved word in JavaScript. Instead, JSX uses className.
Another important way in which JSX differs from HTML is in the idea of the self-closing tag.
	HTML -> <div></div>
	JSX -> <div /> or <div></div>  //Any JSX element can be written with a self-closing tag, and every element must be closed
	
	HTML -> <br> or as <br />
	JSX -> <br /> // in order to be valid JSX that can be transpiled
	
	
There are mainly two ways of creating a component in React:

class-based component
functional component
	
Create a Stateless Functional Component:
	Components are the core of React. Everything in React is a component
	There are two ways to create a React component. 
		The first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component
			To create a component with a function, you simply write a JavaScript function that returns either JSX or null
				const MyComponent = function() {
				  // Change code below this line
				  return (
					<div className="Test">Some Text</div>
				  );
				  // Change code above this line
				}
				
				using Arrow function:
					const TypesOfFruit = () => {
					  return (
						<div>
						  <h2>Fruits:</h2>
						  <ul>
							<li>Apples</li>
							<li>Blueberries</li>
							<li>Strawberries</li>
							<li>Bananas</li>
						  </ul>
						</div>
					  );
					};
				
		The other way to define a React component is with the ES6 class syntax
			class Kitten extends React.Component {  //Kitten class now has access to many useful React features, such as local state and lifecycle hooks.
			  constructor(props) {
				super(props);
			  }

			  render() {
				return (
				  <h1>Hi</h1>
				);
			  }
			}
	
	Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces.

	Create a Component with Composition
	When React encounters a custom HTML tag that references another component (a component name wrapped in < />
		return (
		 <App>
		  <Navbar />
		  <Dashboard />
		  <Footer />
		 </App>
		)
	
Component composition is one of React's powerful features. When you work with React, it is important to start thinking about your user interface in terms of components
You can render JSX elements, stateless functional components, and ES6 class components within other components.

Render a Class Component to the DOM: ReactDOM.render(<ComponentToRender />, targetNode)




	Write a React Component from Scratch

			class MyComponent extends React.Component{
			  constructor(props){
				super(props);
			  }
			  render(){
				return (
				  <div>
					<h1>My First React Component!</h1>
				  </div>
				);
			  }
			}

			ReactDOM.render(<MyComponent/>,document.getElementById("challenge-node"));
			
	Props:
		simple props (JSX):
			const CurrentDate = (props) => {
			  return (
				<div>
				  { /* Change code below this line */ }
				  <p>The current date is: {props.date}</p>
				  { /* Change code above this line */ }
				</div>
			  );
			};

			class Calendar extends React.Component {
			  constructor(props) {
				super(props);
			  }
			  render() {
				return (
				  <div>
					<h3>What date is it?</h3>
					{ /* Change code below this line */ }
					<CurrentDate date={Date()}/>
					{ /* Change code above this line */ }
				  </div>
				);
			  }
			};
		
	Using array in props:
		<p>{props.tasks.join(', ')}</p>
	
		<List tasks={["apple","orange"]}/>
		
	Use Default Props:
		MyComponent.defaultProps = { location: 'San Francisco' }
		
	Override Default Props: The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.
		1. create your component
		2. set default Props
		3. while calling component in main component, we can pass prop to override default value
		
	Use PropTypes to Define the Props You Expect
			React provides useful type-checking features to verify that components receive props of the correct type
			It's considered a best practice to set propTypes when you know the type of a prop ahead of time.
			
			MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }
			Items.propTypes = { quantity: PropTypes.number.isRequired }
			Syntax: <classComponent>.propTypes = { <prop>: PropTypes.<datatype>.isRequired }
			
			Note: As of React v15.5.0, PropTypes is imported independently from React, like this: import PropTypes from 'prop-types';
			
			
	Access Props Using this.props (Class)
		if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props.
		
		Anytime you refer to a class component within itself, you use the this keyword. 
			{this.props.data}
			
			
	A stateless functional component is any function you write which accepts props and returns JSX. A stateless component, on the other hand, is a class that extends React.Component, but does not use internal state (covered in the next challenge). Finally, a stateful component is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.
	
	
Create a Stateful Component
	One of the most important topics in React is state. 
	State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.
	
	you must create a class component by extending React.Component in order to create state like this.
	
		class StatefulComponent extends React.Component {
		  constructor(props) {
			super(props);
			// Only change code below this line
			this.state={
			  firstName: "val"
			}
			// Only change code above this line
		  }
		  render() {
			return (
			  <div>
				<h1>{this.state.firstName}</h1>
			  </div>
			);
		  }
		};
		
	Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in state in its render() method. You can access the data with this.state.
	
	 React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.
	 
	 another way to use state
	 class StatefulComponent extends React.Component {
		  constructor(props) {
			super(props);
			// Only change code below this line
			this.state={
			  firstName: "val"
			}
			// Only change code above this line
		  }
		  render() {
			const name = this.state.firstName;  //no need for {} because it is part of JS
			return (
			  <div>
				<h1>{name}</h1>
			  </div>
			);
		  }
		};
		
change the component's state:
	React provides a method for updating component state called setState. 
	You call the setState method within your component class like so: this.setState(), passing in an object with key-value pairs. 
	
		this.setState({
		  username: 'Lewis'
		});
		
	## Syntax of setState
	To make the state change, React gives us a setState function that allows us to update the value of the state.

	The setState function has the following syntax:

		setState(updater, [callback])
		
	updater can either be a function or an object
	callback is an optional function that gets executed once the state is successfully updated
	Calling setState automatically re-renders the entire component and all its child components. 
	We don't need to manually re-render as seen previously using the renderContent function.
	
		
Bind 'this' to a Class Method:
A class method typically needs to use the this keyword so it can access properties on the class (such as state and props) inside the scope of the method. 		
Few ways to allow your class methods to access this:		
	One common way is to explicitly bind this in the constructor so this becomes bound to the class methods when the component is initialized.
			this.handleClick = this.handleClick.bind(this)
			
			
	How to Use ES6 Shorthand Syntax
	handleClick(){
		this.setState((prevState) => {
			  return {
				counter: prevState.counter + 1
			  };
		});
	}


Create a Controlled Input
Your application may have more complex interactions between state and the rendered UI. For example, form control elements for text input, such as input and textarea, maintain their own state in the DOM as the user types. With React, you can move this mutable state into a React component's state. The user's input becomes part of the application state, so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form.

		this.state = {
		  input: ''
		};
		// Change code below this line
		this.handleChange = this.handleChange.bind(this);
		// Change code above this line
	  }
	  // Change code below this line
	  handleChange(event){
		this.setState({
		  input:event.target.value
		});
	  }
	  
	  <div>
			{ /* Change code below this line */}
			<input value={this.state.input} onChange={this.handleChange}/>
			{ /* Change code above this line */}
			<h4>Controlled Input:</h4>
			<p>{this.state.input}</p>
		  </div>
		  
Create a Controlled Form

Note: You also must call event.preventDefault() in the submit handler, to prevent the default form submit behavior which will refresh the web page. For camper convenience, the default behavior has been disabled here to prevent refreshes from resetting challenge code.


This pattern illustrates some important paradigms in React. 
	The first is unidirectional data flow. State flows in one direction down the tree of your application's components, from the stateful parent component to child components. The child components only receive the state data they need. 

	The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of your components simply receive state from the parent as props, and render a UI from that state. It begins to create a separation where state management is handled in one part of code and UI rendering in another. 

	This principle of separating state logic from UI logic is one of React's key principles. When it's used correctly, it makes the design of complex, stateful applications much easier to manage.
	
/*************** Example: Pass a Callback as Props *********************/
class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputValue: ''
    }
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({
      inputValue: event.target.value
    });
  }
  render() {
    return (
       <div>
        { /* Change code below this line */ }
        <GetInput input={this.state.inputValue} handleChange={this.handleChange}/>
        <RenderInput input={this.state.inputValue}/>
        { /* Change code above this line */ }
       </div>
    );
  }
};

class GetInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Get Input:</h3>
        <input
          value={this.props.input}
          onChange={this.props.handleChange}/>
      </div>
    );
  }
};

class RenderInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Input Render:</h3>
        <p>{this.props.input}</p>
      </div>
    );
  }
};

#Use the Lifecycle Method componentWillMount

These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time.
This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. 
Here is a list of some of the main lifecycle methods: 

componentWillMount() 
componentDidMount() //Most web developers, at some point, need to call an API endpoint to retrieve data or any calls to your server in the lifecycle method
					Any calls to setState() here will trigger a re-rendering of your component. 
						componentDidMount() {
							setTimeout(() => {
							  this.setState({
								activeUsers: 1273
							  });
							}, 2500);
						  }
						  render() {}
shouldComponentUpdate() 
componentDidUpdate() 
componentWillUnmount() 


Add Event Listeners