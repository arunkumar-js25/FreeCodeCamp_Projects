//Maintain Packages

The package.json file is the center of any Node.js project or npm package. It stores information about your project, similar to how the <head> section of an HTML document describes the content of a webpage. It consists of a single JSON object where information is stored in key-value pairs. There are only two required fields; "name" and "version", but it’s good practice to provide additional information about your project that could be useful to future users or maintainers.

To allow an npm dependency to update to the latest PATCH version, 
	"package": "MAJOR.MINOR.PATCH"
you can prefix the dependency’s version with the tilde (~) character. Here's an example of how to allow updates to any 1.3.x version.
If you were to use the caret (^) as a version prefix instead, npm would be allowed to update to any 1.x.x version.

			{
			  "name": "fcc-learn-node-with-express",
			  "description":"",
			  "author": "",
			  "keywords": [ "descriptive", "related", "words" ],
			  /* Some common licenses for open source projects include MIT and BSD. License information is not required, and copyright laws in most countries will give you ownership of what you create by default. However, it’s always a good practice to explicitly state what users can and can’t do.*/
			  "license":"MIT",
			  
			  /*A version is one of the required fields of your package.json file*/
			  "version": "0.1.0",

				/*
				One of the biggest reasons to use a package manager, is their powerful dependency management. Instead of manually having to make sure that you get all dependencies whenever you set up a project on a new computer, npm automatically installs everything for you. But how can npm know exactly what your project needs? Meet the dependencies section of your package.json file.
				*/
			  
			  "dependencies": {
				"body-parser": "^1.15.2",  
				"cookie-parser": "^1.4.3",
				"dotenv": "^16.0.1",
				"express": "^4.14.0",
				"fcc-express-bground": "https://github.com/freeCodeCamp/fcc-express-bground-pkg.git"
			  },
			  "main": "server.js",
			  "scripts": {
				"start": "node server.js"
			  }
			}
			
			
//Node.js is a JavaScript runtime that allows developers to write backend (server-side) programs in JavaScript. Node.js comes with a handful of built-in modules — small, independent programs — that help with this. Some of the core modules include HTTP, which acts like a server, and File System, a module to read and modify files.

//Express Server
Express is a lightweight web application framework, and is one of the most popular packages on npm. Express makes it much easier to create a server and handle routing for your application, which handles things like directing people to the correct page when they visit a certain endpoint like /blog.

1. create an Express app object
	
	let express = require('express');
	let app = express();
	
	NOTE: One fundamental method is app.listen(port). It tells your server to listen on a given port, putting it in running state

2. Routes takes the following structure: app.METHOD(PATH, HANDLER). 
	
	res.send(<str>)
	res.sendfile(filePath) // __dirname + /views/index.html
	res.json()	//json data   
				//Behind the scenes, it converts a valid JavaScript object into a string, then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back.
	
	METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). 
	HANDLER is a function that Express calls when the route is matched. 
			Handlers take the form function(req, res) {...}, 
			where req is the request object, and res is the response object. For example, the handler will serve the string 'Response String'.

					function(req, res) {
					  res.send('Response String');
					}
			
	Syntax:
	app.get('/', function (req, res) {  
	  res.send('Response String');  
	}); 
	
	app.get('/', function (req, res) {  
	  res.sendFile(__dirname+'/views/index.html');    
	  //We recommend you to use the Node global variable __dirname to calculate the path like this: absolutePath = __dirname + relativePath/file.ext
	}); 
	
	Note: If you are going to receive data from a POST request, at the same /name route path. 
			If you want, you can use the method app.route(path).get(handler).post(handler). 
			This syntax allows you to chain different verb handlers on the same path route. You can save a bit of typing, and have cleaner code.
			
	Tip: There are several other http methods other than GET and POST. And by convention there is a correspondence between the http verb, and the operation you are going to execute on the server. The conventional mapping is:

		POST (sometimes PUT) - Create a new resource using the information sent with the request,

		GET - Read an existing resource without modifying it,

		PUT or PATCH (sometimes POST) - Update a resource using the data sent,

		DELETE => Delete a resource.

	There are also a couple of other methods which are used to negotiate a connection with the server. Except from GET, all the other methods listed above can have a payload (i.e. the data into the request body). The body-parser middleware works with these methods as well.

	
3. Middleware
	
	Basically, middleware are functions that intercept route handlers, adding some kind of information. 
	A middleware needs to be mounted at root level, using the method 
		app.use(path, middlewareFunction). 
			The first path argument is optional. If you don’t pass it, the middleware will be executed for all requests.
			
	if you want a function to be executed only for POST requests, you could use app.post(<mware-function>). Analogous methods exist for all the HTTP verbs (GET, DELETE, PUT, …).

	Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function in the application’s request-response cycle. 
		Example: express.static(__dirname + "/public")  //for using files from one place globally in app
		
	You can get the request method (http verb), the relative route path, and the caller’s ip from the request object using 
		req.method
		req.path
		req.ip  //we can also create/modify request objects
	
	These functions execute some code that can have side effects on the app, and usually add information to the request or response objects. They can also end the cycle by sending a response when some condition is met. If they don’t send the response when they are done, they start the execution of the next function in the stack. This triggers calling the 3rd argument, next().
	
			function(req, res, next) {
				console.log("I'm a middleware...");
				next();
			}
			
	Remember to call next() when you are done, or your server will be stuck forever.
	
	Note: Express evaluates functions in the order they appear in the code. This is true for middleware too. If you want it to work for all the routes, it should be mounted before them.
	
	
	//serve Static Assets
		// Normal usage
		app.use(express.static(__dirname + "/public"));

		// Assets at the /public route
		app.use("/public", express.static(__dirname + "/public"));
		
	
	//Simple Logger
		app.use(function(req, res, next) {
		  console.log(req.method + " "+ req.path +" - "+ req.ip);
		  next();
		});
	
	//chain Middleware to Create a Time Server
	
		Middleware can be mounted at a specific route using app.METHOD(path, middlewareFunction). Middleware can also be chained within a route definition.
		
		This approach is useful to split the server operations into smaller units. That leads to a better app structure, and the possibility to reuse code in different places. This approach can also be used to perform some validation on the data. At each point of the middleware stack you can block the execution of the current chain and pass control to functions specifically designed to handle errors. Or you can pass control to the next matching route, to handle special cases
		
			app.get('/user', function(req, res, next) {
			  req.user = getTheUserSync();  // Hypothetical synchronous operation
			  next();
			}, function(req, res) {
			  res.send(req.user);
			});
			
4. Env
	
	The .env file is a hidden file that is used to pass environment variables to your application. This file is secret, no one but you can access it, and it can be used to store data that you want to keep private or hidden. For example, you can store API keys from external services or your database URI. You can also use it to store configuration options. By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.
	
	The environment variables are accessible from the app as process.env.VAR_NAME. The process.env object is a global Node object, and variables are passed as strings. By convention, the variable names are all uppercase, with words separated by an underscore. The .env is a shell file, so you don’t need to wrap names or values in quotes. It is also important to note that there cannot be space around the equals sign when you are assigning values to your variables, e.g. VAR_NAME=value. Usually, you will put each variable definition on a separate line.
	
	Note: If you are using Replit, you cannot create a .env file. Instead, use the built-in SECRETS tab to add the variable
	
	If you are working locally, you will need the dotenv package. It loads environment variables from your .env file into process.env. The dotenv package has already been installed, and is in your project's package.json file. At the top of your myApp.js file, import and load the variables with require('dotenv').config().

			app.get('/json', function (req, res) { 
			  let msg="Hello json";
			  if(process.env.MESSAGE_STYLE == "uppercase")
			  {
				msg = msg.toUpperCase();
			  }
			  res.json({"message": msg});  
			}); 
			
5. Input from Client
	1. Get Route Parameter Input from the Client
		
		When building an API, we have to allow users to communicate to us what they want to get from our service. 
		
		For example, 
			* if the client is requesting information about a user stored in the database, they need a way to let us know which user they're interested in. One possible way to   achieve this result is by using route parameters. Route parameters are named segments of the URL, delimited by slashes (/). 
			* Each segment captures the value of the part of the URL which matches its position. The captured values can be found in the req.params object.
			
			route_path: '/user/:userId/book/:bookId'
			actual_request_URL: '/user/546/book/6754'
			req.params: {userId: '546', bookId: '6754'}
			
			
			app.get('/:word/echo', function (req, res) {  
			  res.json({"echo": req.params.word});
			}); 
			
	2. Get Query Parameter Input from the Client
		Another common way to get input from the client is by encoding the data after the route path, using a query string. The query string is delimited by a question mark (?), and includes field=value couples. Each couple is separated by an ampersand (&). Express can parse the data from the query string, and populate the object req.query. Some characters, like the percent (%), cannot be in URLs and have to be encoded in a different format before you can send them. If you use the API from JavaScript, you can use specific methods to encode/decode these characters.

			route_path: '/library'
			actual_request_URL: '/library?userId=546&bookId=6754'
			req.query: {userId: '546', bookId: '6754'}
		
			
			URL: https://boilerplate-express.arunkumar-js25.repl.co/name?first=firstname&last=lastname
			
			app.get('/name', function (req, res) {  
			  res.json({"name": req.query.first + " " + req.query.last});
			}); 

6. body-parser

	Use body-parser to Parse POST Requests
	Besides GET, there is another common HTTP verb, it is POST. POST is the default method used to send client data with HTML forms. In REST convention, POST is used to send data to create new items in the database (a new user, or a new blog post). You don’t have a database in this project, but you are going to learn how to handle POST requests anyway.

	In these kind of requests, the data doesn’t appear in the URL, it is hidden in the request body. The body is a part of the HTTP request, also called the payload. Even though the data is not visible in the URL, this does not mean that it is private. To see why, look at the raw content of an HTTP POST request:

	POST /path/subpath HTTP/1.0
	From: john@example.com
	User-Agent: someBrowser/1.0
	Content-Type: application/x-www-form-urlencoded
	Content-Length: 20

	name=John+Doe&age=25
	As you can see, the body is encoded like the query string. This is the default format used by HTML forms. With Ajax, you can also use JSON to handle data having a more complex structure. There is also another type of encoding: multipart/form-data. This one is used to upload binary files. In this exercise, you will use a URL encoded body. To parse the data coming from POST requests, you must use the body-parser package. This package allows you to use a series of middleware, which can decode data in different formats.

	body-parser has already been installed and is in your project's package.json file. require it at the top of the myApp.js file and store it in a variable named bodyParser. The middleware to handle URL encoded data is returned by bodyParser.urlencoded({extended: false}). Pass the function returned by the previous method call to app.use(). As usual, the middleware must be mounted before all the routes that depend on it.

	Note: extended is a configuration option that tells body-parser which parsing needs to be used. When extended=false it uses the classic encoding querystring library. When extended=true it uses qs library for parsing.

	When using extended=false, values can be only strings or arrays. The object returned when using querystring does not prototypically inherit from the default JavaScript Object, which means functions like hasOwnProperty, toString will not be available. The extended version allows more data flexibility, but it is outmatched by JSON.
	
	
	
Total Code: MyApp.js

let express = require('express');
let bodyParser = require('body-parser');
let app = express();
console.log("Hello World");

app.use(function(req, res, next) {
  console.log(req.method + " "+ req.path +" - "+ req.ip);
  next();
});

app.use('/public',express.static(__dirname + "/public")); 
app.use('/name',bodyParser.urlencoded({extended: false})); 

app.get('/:word/echo', function (req, res) {  
  res.json({"echo": req.params.word});
}); 

app.get('/name', function (req, res) {  
  res.json({"name": req.query.first + " " + req.query.last});
}).post('/name', function (req, res) {  
  res.json({"name": req.body.first + " " + req.body.last});
}); 


app.get('/now', function (req, res, next) {  
  req.time = new Date().toString();
  next();
},
  function (req, res) {  
  res.json({"time": req.time});  
});

app.get('/', function (req, res) {  
  res.sendFile(__dirname+'/views/index.html');  
}); 

app.get('/', function (req, res) {  
  res.send('Hello Express');  
}); 


app.get('/json', function (req, res) { 
  let msg="Hello json";
  if(process.env.MESSAGE_STYLE == "uppercase")
  {
    msg = msg.toUpperCase();
  }
  res.json({"message": msg});  
}); 


 module.exports = app;
