D3, or D3.js, stands for Data Driven Documents. It's a JavaScript library for creating dynamic and interactive data visualizations in the browser.
D3 is built to work with common web standards â€“ namely HTML, CSS, and Scalable Vector Graphics (SVG).
D3 supports many different kinds of input data formats. Then, using its powerful built-in methods, you can transform those data into different charts, graphs, and maps.


https://github.com/d3/d3/blob/main/API.md#axes-d3-axis

Sample Example1:
	<body>
		<script src = "https://d3js.org/d3.v4.min.js"></script>
	  <script>
		// Add your code below this line
		const anchor = d3.select("body").append("h1").text("Learning D3");


		// Add your code above this line
	  </script>
	</body>

Functions:
	select()
	selectAll()
	data() => enter()
	append()
	text()  //The D3 text() method can take a string or a callback function as an argument: selection.text((d) => d)
	style("font-family","verdana")   //selection.style("color", (d) => {  if(){ return "red"; }  return "green"; });
	style("cssProperty", (d) => d)
	attr("class", "bar");
	
	min(dataset)
	max(dataset,(d)=>d[0]) //if multidimensional array\
	
	scaleLinear() -> const scale=d3.scaleLinear();  const output = scale(scalingfactor);  //scaling factor  - number value
		.domain([0,100])
		.range({0,100])
	
	axisBottom()
	axisLeft()


How DataSet works:
	The D3 library focuses on a data-driven approach. When you have a set of data, you can apply D3 methods to display it on the page.
	The first step is to make D3 aware of the data. The data() method is used on a selection of DOM elements to attach the data to those elements. The data set is passed as an argument to the method.
	A common workflow pattern is to create a new element in the document for each piece of data in the set. D3 has the enter() method for this purpose.
	When enter() is combined with the data() method, it looks at the selected elements from the page and compares them to the number of data items in the set. If there are fewer elements than data items, it creates the missing elements.

		const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

		// Add your code below this line
		d3.select("body").selectAll("h2").data(dataset).enter().append("h2").text("New Title");



Learn About SVG in D3:
	SVG stands for Scalable Vector Graphics.
	
	Here "scalable" means that, if you zoom in or out on an object, it would not appear pixelated. It scales with the display system, whether it's on a small mobile screen or a large TV monitor.

	SVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML svg tag.

	CSS can be scalable when styles use relative units (such as vh, vw, or percentages), but using SVG is more flexible to build data visualizations.
		
		<style>
		  .bar:hover {
			fill: brown;
		  }
		</style>
		
		const w = 500;
		const h = 100;
		const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);
				  
	The next step is to create a shape to put in the svg area. There are a number of supported shapes in SVG, such as rectangles and circles. They are used to display data. For example, a rectangle (<rect>) SVG shape could create a bar in a bar chart.

	When you place a shape into the svg area, you can specify where it goes with x and y coordinates. The origin point of (0, 0) is in the upper-left corner. Positive values for x push the shape to the right, and positive values for y push the shape down from the origin point.

	To place a shape in the middle of the 500 (width) x 100 (height) svg from last challenge, the x coordinate would be 250 and the y coordinate would be 50.

	An SVG rect has four attributes. There are the x and y coordinates for where it is placed in the svg area. It also has a height and width to specify the size.
				
				svg.selectAll("rect")
				   .data(dataset)
				   .enter()
				   .append("rect")
				   .attr("x", (d, i) => i * 30)
				   .attr("y", (d, i) => h - 3 * d)  // y = heightOfSVG - heightOfBar // otherwise the bar shows upside down
				   .attr("width", 25)
				   .attr("height", (d, i) => 3 * d) // we consider 3 times
				   .attr("fill", "navy");
				   .attr("fill", "navy")
				   .attr("class", "bar")
				   .append("title").text((d)=> d)
			   
	In SVG, the origin point for the coordinates is in the upper-left corner. An x coordinate of 0 places a shape on the left edge of the SVG area. A y coordinate of 0 places a shape on the top edge of the SVG area. Higher x values push the rectangle to the right. Higher y values push the rectangle down.

	To make the bars right-side-up, you need to change the way the y coordinate is calculated. It needs to account for both the height of the bar and the total height of the SVG area.

	The height of the SVG area is 100. If you have a data point of 0 in the set, you would want the bar to start at the bottom of the SVG area (not the top). To do this, the y coordinate needs a value of 100. If the data point value were 1, you would start with a y coordinate of 100 to set the bar at the bottom. Then you need to account for the height of the bar of 1, so the final y coordinate would be 99.

	The y coordinate that is y = heightOfSVG - heightOfBar would place the bars right-side-up.
	
	
	
How to add labels

	a text element needs to have x and y attributes, to place it on the SVG canvas. It also needs to access the data to display those values.

	svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .attr("x", (d, i) => i * 30)
       .attr("y",(d,i) => (h - 3 * d) - 3)
       .text((d) => d)
	   
Create a Scatterplot with SVG Circles
	A scatter plot is another type of visualization. It usually uses circles to map data points, which have two values each. These values tie to the x and y axes, and are used to position the circle in the visualization.
	
	A circle in SVG has three main attributes. The cx and cy attributes are the coordinates. They tell D3 where to position the center of the shape on the SVG canvas. The radius (r attribute) gives the size of the circle.
	
	svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       .attr("cx", (d, i) => d[0])
       .attr("cy", (d, i) => h - d[1])
       .attr("r", 5);

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .attr("x", (d, i) => d[0] + 5)
       .attr("y",(d,i) => h-d[1])
       .text((d) => d[0] + ", "+ d[1])


Create a Linear Scale with D3
	The bar and scatter plot charts both plotted data directly onto the SVG canvas. However, if the height of a bar or one of the data points were larger than the SVG height or width values, it would go outside the SVG area.

	In D3, there are scales to help plot data. scales are functions that tell the program how to map a set of raw data points onto the pixels of the SVG canvas.

	For example, say you have a 100x500-sized SVG canvas and you want to plot Gross Domestic Product (GDP) for a number of countries. The set of numbers would be in the billion or trillion-dollar range. You provide D3 a type of scale to tell it how to place the large GDP values into that 100x500-sized area.

	It's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the x and y values fit your canvas width and height.
	
	D3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method scaleLinear():

	const scale = d3.scaleLinear()
	By default, a scale uses the identity relationship. The value of the input is the same as the value of the output. A separate challenge covers how to change this.
	
	Set a Domain and a Range on a Scale
		By default, scales use the identity relationship. This means the input value maps to the output value. However, scales can be much more flexible and interesting.

		Say a dataset has values ranging from 50 to 480. This is the input information for a scale, also known as the domain.

		You want to map those points along the x axis on the SVG canvas, between 10 units and 500 units. This is the output information, also known as the range.
		
		
				const scale = d3.scaleLinear();
				scale.domain([250, 500]);
				scale.range([10, 150]);

				const output = scale(50);  //scaling factor
				d3.select("body")
				  .append("h2")
				  .text(output);
				  
				  
Use the d3.max and d3.min Functions to Find Minimum and Maximum Values in a Dataset
	const output = d3.max(positionData, (d) => d[2]);
	const output = d3.min(positionData, (d) => d[2]);
	
	
	
	
use Dynamic scales to fit all scatterplot data inside svg:

<body>
  <script>
    const dataset = [
                  [ 34,    78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,    411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
                  [ 333,   96 ],
                  [ 222,   333 ],
                  [ 78,    320 ],
                  [ 21,    123 ]
                ];

    const w = 500;
    const h = 500;

    // Padding between the SVG canvas boundary and the plot
    const padding = 30;

    // Create an x and y scale

    const xScale = d3.scaleLinear()
                    .domain([0, d3.max(dataset, (d) => d[0])])
                    .range([padding, w - padding]);

    // Add your code below this line

    const yScale = d3.scaleLinear()
                    .domain([0, d3.max(dataset, (d) => d[1])])
                    .range([h-padding, padding]);


    // Add your code above this line

    const output = yScale(411); // Returns 30
    d3.select("body")
      .append("h2")
      .text(output)
  </script>
</body>

NOTE: For the text elements, apply the scales to set the x and y attributes. The labels should be offset to the right of the dots. To do this, add 10 units to the x data value before passing it to the xScale.


Add Axes to a Visualization:
		
		D3 has two methods, axisLeft() and axisBottom(), to render the y-axis and x-axis, respectively. Here's an example to create the x-axis based on the xScale in the previous challenges:

			const xAxis = d3.axisBottom(xScale);
			const yAxis = d3.axisLeft(yScale);
			svg.append("g")   //axis bar
			   .attr("transform", "translate(0, " + (h - padding) + ")")
			   .call(xAxis);
			   
			   
			svg.append("g")
			   .attr("transform", "translate(" +  (padding) + ",0)")
			   .call(yAxis);  //call is important which shows the axis in layout