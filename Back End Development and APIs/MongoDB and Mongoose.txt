MongoDB and Mongoose

#Things to Remember
MongoDB - login via Github

Installation: https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/

	Create a MongoDB Atlas Account
		MongoDB Atlas is a MongoDB Database-as-a-Service platform, which means that they configure and host the database for you. Then, your only responsibility will be to populate your database with what matters: data.
		Go here to sign up for a new MongoDB Atlas account.
		Fill in the registration form with your information and click Sign up.
	
	Create a New Cluster
		On the next page, fill in your organization's name, project's name, select JavaScript as your preferred programming language, and click the green Continue button.
		Once you create and verify your account, answer the onboarding questions (your goal, the type of application you're building, your preferred programming language, etc.) and click the green Finish button.
		On the "Deploy a cloud database" page, click the Create button under the Shared cluster type. This should be the only free option:
		In the Cloud Provider & Region dropdown, leave everything as default, which is typically AWS N. Virginia (us-east-1).
		In the Cluster Tier dropdown, leave this as the default, M0 Sandbox (Shared RAM, 512 MB Storage).
		In the Cluster Name dropdown, you can give your cluster a name, or leave it as the default, Cluster0.
		Click the green Create Cluster button at the bottom of the screen.
		You should now see the message "M0 Cluster Provisioning... This process will take 3-5 minutes." Wait until the cluster is created before going to the next step.
	
	Create a New User for the Database
		On the left side of screen under SECURITY, click on Database Access.
		Click the green Add New Database User button.
		Under Authentication Method, make sure Password is selected, then enter in a username and password for your user.
		Under Database User Privileges, leave this as the default option, Read and write to any database.
		Click the Add User button to create your new user.
	
	Allow Access From All IP Addresses
		On the left side of the screen under SECURITY, click on Network Access.
		Click the green Add IP Address button.
		In the modal, click the ALLOW ACCESS FROM ANYWHERE button. You should see 0.0.0.0/0 in the Access List Entry field.
		Click the green Confirm button.
	
	Connect to Your Cluster
		On the left side of the screen under DEPLOYMENT, click on Database.
		Click the Connect button for your cluster:
		The Connect button for your cluster, Cluster0 if you left the name as its default.
		In the popup modal, click on Connect your application.
		You should see the URI string you'll use to connect to your database similar to this: mongodb+srv://<username>:<password>@<cluster-name>.prx1c.mongodb.net/<db-name>?retryWrites=true&w=majority.
		Click the Copy button to copy your URI to your clipboard.
		
	My connection URI : mongodb+srv://arun25:mongodb123@cluster0.oxrgmfx.mongodb.net/?retryWrites=true&w=majority	
		
		
		Notice that the <username> and <cluster-name> fields of the URI you copied are already filled out for you. All you need to do is replace the <password> field with the one you created in the previous step, and be sure to add the name of your database before the query string (?retryWrites=true&w=majority).
		You can call your database anything, but it's good to give it a memorable name for your project. For example, if you're working on the "MongoDB and Mongoose" challenges, you could replace <db-name> with fcc-mongodb-and-mongoose or something similar.

	Connect to An Existing Database
	If you've already created a cluster and a database and would like to connect it to a new application, follow these steps:

	On the left side of the screen under DEPLOYMENT, click on Database.
	Find your cluster and click the Browse Collections button to see a list of existing databases and collections.
	Copy the database name you want to connect to and replace <db-name> with it in the URI string above.
	
	mongodb+srv://arun25:mongodb123@cluster0.oxrgmfx.mongodb.net/ak-mongodb?retryWrites=true&w=majority	

Example Github; https://github.com/freeCodeCamp/boilerplate-mongomongoose/

1. Connect MongoDB
	
	mongoose@^5.11.15 has been added to your project’s package.json file. 
	
	First, require mongoose as mongoose in myApp.js. Next, create a .env file and add a MONGO_URI variable to it. Its value should be your MongoDB Atlas database URI. Be sure to surround the URI with single or double quotes, and remember that you can't use spaces around the = in environment variables. For example, MONGO_URI='VALUE'.

	Note: If you are using Replit, you cannot create a .env file. Instead, use the built-in SECRETS tab to add the variable. Do not surround the values with quotes when using the SECRETS tab.

	When you are done, connect to the database using the following syntax:
	mongoose.connect(<Your URI>, { useNewUrlParser: true, useUnifiedTopology: true });
	
		Example:
			let mongoose = require('mongoose');
			mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });


BLOG::https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/
2. Create a Model >> CRUD Part I - CREATE

	First of all, we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection. Schemas are building blocks for Models. They can be nested to create complex models, but in this case, we'll keep things simple. A model allows you to create instances of your objects, called documents. 
	
	Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.
	
	https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/
	
	let mongoose = require('mongoose')
	let validator = require('validator')

	let emailSchema = new mongoose.Schema({   //NEW SCHEMA
	  email: { 								 //DEFINE COLUMN
		type: String,
		required: true,
		unique: true,
		lowercase: true,
		validate: (value) => {
		  return validator.isEmail(value)
		}
	  }
	})
	module.exports = mongoose.model('Email', emailSchema) //CREATE INSTANCE OF A MODEL
	
	The following Schema Types are permitted:

		Array
		Boolean
		Buffer
		Date
		Mixed (A generic / flexible data type)
		Number
		ObjectId
		String
		Mixed and ObjectId are defined under require(‘mongoose’).Schema.Types.
			
	EXAMPLE:
	
		const personSchema = new mongoose.Schema({
			name : {
			  type: String,
			  required: true
			},
			age : {
			  type: Number
			},
			favoriteFoods : {
			  type: [String]
			}
		});

		let Person = mongoose.model("Person", personSchema);
	
	
	
3. Create and Save a Record of a Model
		call the method document.save() on the returned document instance. Pass to it a callback using the Node convention. This is a common pattern; all the following CRUD methods take a callback function like this as the last argument.
	
		let personDetail = new Person({
			name:"arun", age:20, favoriteFoods:["briyani","dosa"]
		})
		  
		personDetail.save(function(err, data) {
			if (err) return console.error(err);
			done(null, data);
		});
	
	
4. Model Commands: https://mongoosejs.com/docs/api/model.html

	Person.create(arrayOfPeople,function(err, data) {
		if (err) return console.error(err);
		done(null, data);
	});
	
	Person.find({name:personName},function(err, data) {
		if (err) return console.error(err);
		done(null, data);
	});
	
	Person.findOne({favoriteFoods:[food]},function(err, data) {
		if (err) return console.error(err);
		done(null, data);
	});
  
	Person.findById(personId,function(err, data) {
		if (err) return console.error(err);
		done(null, data);
	});
	
	
	findOneAndUpdate()
	Note: You should return the updated document. To do that, you need to pass the options document { new: true } as the 3rd argument to findOneAndUpdate(). By default, these methods return the unmodified object.
	
	Delete One Document Using model.findByIdAndRemove - findByIdAndRemove() or findOneAndRemove().
	
	Modify the removeManyPeople function to delete all the people whose name is within the variable nameToRemove, using Model.remove(). Pass it to a query document with the name field set, and a callback.

	Modify the removeManyPeople function to delete all the people whose name is within the variable nameToRemove, using Model.remove(). Pass it to a query document with the name field set, and a callback.

	Note: The Model.remove() doesn’t return the deleted document, but a JSON object containing the outcome of the operation, and the number of items affected. Don’t forget to pass it to the done() callback, since we use it in tests.
	
	
	* Chain Search Query Helpers to Narrow Search Results
	
		If you don’t pass the callback as the last argument to Model.find() (or to the other search methods), the query is not executed. You can store the query in a variable for later use. This kind of object enables you to build up a query using chaining syntax. The actual db search is executed when you finally chain the method .exec(). You always need to pass your callback to this last method. There are many query helpers, here we'll use the most commonly used.

		Modify the queryChain function to find people who like the food specified by the variable named foodToSearch. Sort them by name, limit the results to two documents, and hide their age. Chain .find(), .sort(), .limit(), .select(), and then .exec(). Pass the done(err, data) callback to exec().
	
			Person.find({favoriteFoods:foodToSearch})
			.sort({name:1})  1 asc / -1 desc
			.limit(2) - no of documents
			.select({age: 0}) 0 -hide /  1 - show
			.exec(function(err, data) {
				if (err) return console.error(err);
				done(null, data);
			  });
Terminologies
Collections
‘Collections’ in Mongo are equivalent to tables in relational databases. They can hold multiple JSON documents.

Documents
‘Documents’ are equivalent to records or rows of data in SQL. While a SQL row can reference data in other tables, Mongo documents usually combine that in a document.

Fields
‘Fields’ or attributes are similar to columns in a SQL table.

Schema
While Mongo is schema-less, SQL defines a schema via the table definition. A Mongoose ‘schema’ is a document data structure (or shape of the document) that is enforced via the application layer.

Models
‘Models’ are higher-order constructors that take a schema and create an instance of a document equivalent to records in a relational database.




Multer:
	Multer is a Node.js middleware used for handling multipart/form-data, which is primarily used for uploading files.
	https://www.section.io/engineering-education/uploading-files-using-multer-nodejs/
	
	Important points  :: In the form tag, the enctype attribute must be set to multipart/form-data, for Multer to work.
	
	Write this command in your terminal:	npm i multer
	
	After installing the package, we will import it at the top of the app.js file:
	const multer = require("multer");
	
	Then we will start by creating an API endpoint to upload the file, just above the previous one.
	Note: Make sure that the endpoint used to render the page is at the end of all the API endpoints.

	//API Endpoint for uploading file
	app.post("/api/uploadFile", (req, res) => {
	  // Stuff to be added later
	});

	//Configuration for Multer
	const upload = multer({ dest: "public/files" });
	
	In this code, we are calling the multer function that takes certain options as arguments. We pass the dest (destination) option and the value of dest will be:public/files.

	After that, we have to use this upload variable as the middleware in the API endpoint created above.

	Change that API endpoint to this:

	app.post("/api/uploadFile", upload.single("myFile"), (req, res) => {
	  // Stuff to be added later
	  console.log(req.file);
	});
	Here, upload.single is again a function. The single determines that only a single file is to be uploaded. In the case of there being many files, we can use multiple instead of single.
	
	
	Configuring Multer
	Now, we can start configuring Multer in a more complex way and we will do that in two parts:

	Configuring the disk storage and naming the uploaded files.
	To do this, replace the previous one-liner code for configuration with this code:

	Delete this:

	//Configuration for Multer
	const upload = multer({ dest: "public/files" });
	
	Now write this:
	
	//Configuration for Multer
	const multerStorage = multer.diskStorage({
	  destination: (req, file, cb) => {
		cb(null, "public");
	  },
	  filename: (req, file, cb) => {
		const ext = file.mimetype.split("/")[1];
		cb(null, `files/admin-${file.fieldname}-${Date.now()}.${ext}`);
	  },
	});
	
	Multer has an in-built method called diskStorage and it takes a couple of options. The first option is again the destination, but we cannot simply set it as we did before.
	The destination option is a callback function that takes three arguments:
		req, which is the incoming request object.
		file, which is the incoming file object (that we saw in the terminal a bit before).
		cb, which is again another callback function.

	We call the cb function that takes the two arguments. The first is error which we are going to pass null to. The second is the destination folder which is public.

	The second option that this method takes is the filename. It is almost the same as the destination option except in this, the inner callback function takes the filename as the second argument.

	So, you can see that I have created a unique filename for this using the template string in JavaScript. You can refer to the file object that we logged in to our terminal earlier. I have taken the extension from the mimetype property of the file object and also the fieldname.

	Congratulations. We have completed the first step of configuring Multer. Next, we will make a filter to filter out different kinds of files. I will make a filter to only allow the upload of PDF files. You can make your own filter by referring to the code below:

	// Multer Filter
	const multerFilter = (req, file, cb) => {
	  if (file.mimetype.split("/")[1] === "pdf") {
		cb(null, true);
	  } else {
		cb(new Error("Not a PDF File!!"), false);
	  }
	};