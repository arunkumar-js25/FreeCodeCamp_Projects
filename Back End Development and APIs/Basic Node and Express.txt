//Maintain Packages

The package.json file is the center of any Node.js project or npm package. It stores information about your project, similar to how the <head> section of an HTML document describes the content of a webpage. It consists of a single JSON object where information is stored in key-value pairs. There are only two required fields; "name" and "version", but it’s good practice to provide additional information about your project that could be useful to future users or maintainers.

To allow an npm dependency to update to the latest PATCH version, 
	"package": "MAJOR.MINOR.PATCH"
you can prefix the dependency’s version with the tilde (~) character. Here's an example of how to allow updates to any 1.3.x version.
If you were to use the caret (^) as a version prefix instead, npm would be allowed to update to any 1.x.x version.

			{
			  "name": "fcc-learn-node-with-express",
			  "description":"",
			  "author": "",
			  "keywords": [ "descriptive", "related", "words" ],
			  /* Some common licenses for open source projects include MIT and BSD. License information is not required, and copyright laws in most countries will give you ownership of what you create by default. However, it’s always a good practice to explicitly state what users can and can’t do.*/
			  "license":"MIT",
			  
			  /*A version is one of the required fields of your package.json file*/
			  "version": "0.1.0",

				/*
				One of the biggest reasons to use a package manager, is their powerful dependency management. Instead of manually having to make sure that you get all dependencies whenever you set up a project on a new computer, npm automatically installs everything for you. But how can npm know exactly what your project needs? Meet the dependencies section of your package.json file.
				*/
			  
			  "dependencies": {
				"body-parser": "^1.15.2",  
				"cookie-parser": "^1.4.3",
				"dotenv": "^16.0.1",
				"express": "^4.14.0",
				"fcc-express-bground": "https://github.com/freeCodeCamp/fcc-express-bground-pkg.git"
			  },
			  "main": "server.js",
			  "scripts": {
				"start": "node server.js"
			  }
			}
			
			
//Node.js is a JavaScript runtime that allows developers to write backend (server-side) programs in JavaScript. Node.js comes with a handful of built-in modules — small, independent programs — that help with this. Some of the core modules include HTTP, which acts like a server, and File System, a module to read and modify files.

//Express Server
Express is a lightweight web application framework, and is one of the most popular packages on npm. Express makes it much easier to create a server and handle routing for your application, which handles things like directing people to the correct page when they visit a certain endpoint like /blog.

1. create an Express app object
	
	let express = require('express');
	let app = express();
	
	NOTE: One fundamental method is app.listen(port). It tells your server to listen on a given port, putting it in running state

2. Routes takes the following structure: app.METHOD(PATH, HANDLER). 
	
	res.send(<str>)
	res.sendfile(filePath) // __dirname + /views/index.html
	res.json()	//json data   
				//Behind the scenes, it converts a valid JavaScript object into a string, then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back.
	
	METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). 
	HANDLER is a function that Express calls when the route is matched. 
			Handlers take the form function(req, res) {...}, 
			where req is the request object, and res is the response object. For example, the handler will serve the string 'Response String'.

					function(req, res) {
					  res.send('Response String');
					}
			
	Syntax:
	app.get('/', function (req, res) {  
	  res.send('Response String');  
	}); 
	
	app.get('/', function (req, res) {  
	  res.sendFile(__dirname+'/views/index.html');    
	  //We recommend you to use the Node global variable __dirname to calculate the path like this: absolutePath = __dirname + relativePath/file.ext
	}); 
	
3. Middleware
	
	Basically, middleware are functions that intercept route handlers, adding some kind of information. 
	A middleware needs to be mounted using the method app.use(path, middlewareFunction). 
			The first path argument is optional. If you don’t pass it, the middleware will be executed for all requests.
			
			// Normal usage
			app.use(express.static(__dirname + "/public"));

			// Assets at the /public route
			app.use("/public", express.static(__dirname + "/public"));
			
4. Env
	
	The .env file is a hidden file that is used to pass environment variables to your application. This file is secret, no one but you can access it, and it can be used to store data that you want to keep private or hidden. For example, you can store API keys from external services or your database URI. You can also use it to store configuration options. By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.
	
	The environment variables are accessible from the app as process.env.VAR_NAME. The process.env object is a global Node object, and variables are passed as strings. By convention, the variable names are all uppercase, with words separated by an underscore. The .env is a shell file, so you don’t need to wrap names or values in quotes. It is also important to note that there cannot be space around the equals sign when you are assigning values to your variables, e.g. VAR_NAME=value. Usually, you will put each variable definition on a separate line.
	
	Note: If you are using Replit, you cannot create a .env file. Instead, use the built-in SECRETS tab to add the variable
	
	If you are working locally, you will need the dotenv package. It loads environment variables from your .env file into process.env. The dotenv package has already been installed, and is in your project's package.json file. At the top of your myApp.js file, import and load the variables with require('dotenv').config().

			app.get('/json', function (req, res) { 
			  let msg="Hello json";
			  if(process.env.MESSAGE_STYLE == "uppercase")
			  {
				msg = msg.toUpperCase();
			  }
			  res.json({"message": msg});  
			}); 