Redux is a state management framework that can be used with a number of different web technologies, including React.

In Redux, there is a single state object that's responsible for the entire state of your application. 
This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux store. 
This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.

This also means that any time any piece of your app wants to update state, it must do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app.

// Redux methods are available from a Redux object
// For example: Redux.createStore()
// Define the store here:
	const reducer = (state = 5) => {
	  return state;
	}
	let store = Redux.createStore(reducer);

	{OR}
	
	const store = Redux.createStore(
	  (state = {login: false}) => state
	);

The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current state held in the Redux store object with the getState() method.

	const currentState = store.getState()


Define a Redux Action
	Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. 
	
	For example, the action carries a username after a user logs in. While the data is optional, actions must carry a type property that specifies the 'type' of action that occurred.
	
	Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred.
	
		const action = {
		  type: 'LOGIN'
		}
	
Define an Action Creator
		After creating an action, the next step is sending the action to the Redux store so it can update its state
		An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.
		
		const actionCreator = (action) => action;
		
Dispatch an Action Event
		dispatch method is what you use to dispatch actions to the Redux store. Calling store.dispatch() and passing the value returned from an action creator sends an action back to the store.
			Example: 
				store.dispatch(actionCreator());
				store.dispatch({ type: 'LOGIN' });
				
Handle an Action in the Store
	
	After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a reducer function. 
	
	Reducers in Redux are responsible for the state modifications that take place in response to actions. 
	A reducer takes state and action as arguments, and it always returns a new state. It is important to see that this is the only role of the reducer. It has no side effects â€” it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.
	
	Another key principle in Redux is that state is read-only. In other words, the reducer function must always return a new copy of state and never modify state directly. Redux does not enforce state immutability,
		
		const defaultState = {
		  login: false
		};

		const reducer = (state = defaultState, action) => {
		  // Change code below this line
		  console.log(action);
		  if(action.type === "LOGIN"){
		   return {
			  login: true
			};
		  }
		  return state;
		  // Change code above this line
		};

		const store = Redux.createStore(reducer);

		const loginAction = () => {
		  return {
			type: 'LOGIN'
		  }
		};
		
Register a Store Listener
Another method you have access to on the Redux store object is store.subscribe(). This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.	
	const ADD = 'ADD';

	const reducer = (state = 0, action) => {
	  switch(action.type) {
		case ADD:
		  return state + 1;
		default:
		  return state;
	  }
	};

	const store = Redux.createStore(reducer);

	// Global count variable:
	let count = 0;

	// Change code below this line
	store.subscribe(()=>{
	  count += 1;
	});
	// Change code above this line

	store.dispatch({type: ADD});
	console.log(count);
	store.dispatch({type: ADD});
	console.log(count);
	store.dispatch({type: ADD});
<<<<<<< HEAD
	console.log(count);
	
Combine Multiple Reducers
	
	When the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces. Instead, remember the first principle of Redux: all app state is held in a single state object in the store. Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux createStore() method.

	In order to let us combine multiple reducers together, Redux provides the combineReducers() method. This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state.
	
	const rootReducer = Redux.combineReducers({
	  auth: authenticationReducer,
	  notes: notesReducer
	});
	
Use Middleware to Handle Asynchronous Actions
	Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware.
	
		const store = Redux.createStore(
		  asyncDataReducer,
		  Redux.applyMiddleware(ReduxThunk.default)
		);
		
Never Mutate State
	Immutable state means that you never modify state directly, instead, you return a new copy of state.
	state.concat(action.todo) or [...state,action.todo]
	
	One solution from ES6 to help enforce state immutability in Redux is the spread operator: .... 
	
Copy an Object with Object.assign
	Copy an Object with Object.assign
		const newObject = Object.assign({}, obj1, obj2);
		This creates newObject as a new object, which contains the properties that currently exist in obj1 and obj2.
=======

