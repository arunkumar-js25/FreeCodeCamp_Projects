Handle Click Events with JavaScript using the onclick property

	<script>
	  document.addEventListener('DOMContentLoaded', function(){
		document.getElementById('getMessage').onclick = function(){
			const req = new XMLHttpRequest();
				req.open("GET",'/json/cats.json',true);
				req.send();
				req.onload = function(){
				  const json = JSON.parse(req.responseText);
				  document.getElementsByClassName('message')[0].innerHTML = JSON.stringify(json);
				};
		};
		//document.getElementsByClassName('message')[0].textContent="Here is the message";
	  });
	</script>
	 
	<style>
	  body {
		text-align: center;
		font-family: "Helvetica", sans-serif;
	  }
	  h1 {
		font-size: 2em;
		font-weight: bold;
	  }
	  .box {
		border-radius: 5px;
		background-color: #eee;
		padding: 20px 5px;
	  }
	  button {
		color: white;
		background-color: #4791d0;
		border-radius: 5px;
		border: 1px solid #4791d0;
		padding: 5px 10px 8px 10px;
	  }
	  button:hover {
		background-color: #0F5897;
		border: 1px solid #0F5897;
	  }
	</style>

	<h1>Cat Photo Finder</h1>
	<p class="message box">
	  The message will go here
	</p>
	<p>
	  <button id="getMessage">
		Get Message
	  </button>
	</p>
	

Call API:

1.XMLHttpRequest

  const req = new XMLHttpRequest();
    req.open("GET",'/json/cats.json',true);
    req.send();
    req.onload = function(){
      const json = JSON.parse(req.responseText);
      document.getElementsByClassName('message')[0].innerHTML = JSON.stringify(json);
    };

2. Another way to request external data is to use the JavaScript fetch() method. It is equivalent to XMLHttpRequest, but the syntax is considered easier to understand.

	fetch('/json/cats.json')
	  .then(response => response.json())
	  .then(data => {
		document.getElementById('message').innerHTML = JSON.stringify(data);
	  })
	  
3. Post Data with the JavaScript XMLHttpRequest Method
	
	const xhr = new XMLHttpRequest();
	xhr.open('POST', url, true);
	xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
	xhr.onreadystatechange = function () {
	  if (xhr.readyState === 4 && xhr.status === 201){
		const serverResponse = JSON.parse(xhr.response);
		document.getElementsByClassName('message')[0].textContent = serverResponse.userName + serverResponse.suffix;
	  }
	};
	const body = JSON.stringify({ userName: userName, suffix: ' loves cats!' });
	xhr.send(body);
	  
	  
Convert JSON Data to HTML
	Now that you're getting data from a JSON API, you can display it in the HTML.

	You can use a forEach method to loop through the data since the cat photo objects are held in an array. As you get to each item, you can modify the HTML elements.
	
	
	<script>
	  document.addEventListener('DOMContentLoaded', function(){
		document.getElementById('getMessage').onclick = function(){
		
		  const req = new XMLHttpRequest();   //API CALL
		  req.open("GET",'/json/cats.json', true);
		  req.send();
		  req.onload=function(){
			let json = JSON.parse(req.responseText);  //Parse string to JSON object
			let html = "";

			json = json.filter(function(val) {  //prefilter to avoid rendering any images you dont want
			  return (val.id !== 1);
			});

			 json.forEach(function(val) {   //Loop over json objects
			   html += "<div class = 'cat'>"	//Create html tag dynamically

			   html += "<img src = '" + val.imageLink + "' " + "alt='" + val.altText + "'>"  //Render Image from JSON Object from API

			   html += "</div>"
			 });
			 document.getElementsByClassName('message')[0].innerHTML = html;  //finally setting the html tag to the section in page
		   };
		 };
	  });
	</script>


Get Geolocation Data to Find A User's GPS Coordinates
	<script>
	if (navigator.geolocation){
	  navigator.geolocation.getCurrentPosition(function(position) {
		document.getElementById('data').innerHTML="latitude: " + position.coords.latitude + "<br>longitude: " + position.coords.longitude;
	  });
	}
	</script>
	<h4>You are here:</h4>
	<div id="data">

	</div>